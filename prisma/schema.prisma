generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application Models

model User {
  id                  Int       @id @default(autoincrement())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                Role      @default(USER)
  employmentStartDate DateTime?

  accounts             Account[]
  sessions             Session[]
  taskEntries          TaskEntry[]
  timeOffBalances      TimeOffBalance[]
  timeOffTransactions  TimeOffTransaction[]
  recordedTransactions TimeOffTransaction[] @relation("transactionRecorder")
}

model Project {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  taskEntries TaskEntry[]
}

model TaskEntry {
  id       Int      @id @default(autoincrement())
  date     DateTime @db.Date
  hours    Decimal
  taskName String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
}

model TimeOffBalance {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  type      LeaveType
  balance   Decimal   @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, type])
}

model TimeOffTransaction {
  id            Int              @id @default(autoincrement())
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  recordedBy    User?            @relation("transactionRecorder", fields: [recordedById], references: [id], onDelete: SetNull)
  recordedById  Int?
  type          LeaveType
  kind          TimeOffEntryKind
  days          Decimal          @db.Decimal(5, 2)
  effectiveDate DateTime         @db.Date
  periodStart   DateTime?        @db.Date
  periodEnd     DateTime?        @db.Date
  note          String?
  createdAt     DateTime         @default(now())

  @@index([userId, type, effectiveDate])
}

enum Role {
  USER
  ADMIN
}

enum LeaveType {
  SICK
  VACATION
}

enum TimeOffEntryKind {
  ACCRUAL
  USAGE
  ADJUSTMENT
}
