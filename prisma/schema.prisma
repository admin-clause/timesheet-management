generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application Models

model User {
  id                  Int       @id @default(autoincrement())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                Role      @default(USER)
  employmentStartDate DateTime?

  accounts             Account[]
  sessions             Session[]
  taskEntries          TaskEntry[]
  timeOffBalances      TimeOffBalance[]
  timeOffTransactions  TimeOffTransaction[]
  recordedTransactions TimeOffTransaction[] @relation("transactionRecorder")
  requests             ApprovalRequest[]      @relation("requester")
  approvals            ApprovalRequest[]      @relation("approver")
}

model Project {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  taskEntries TaskEntry[]
}

model TaskEntry {
  id       Int      @id @default(autoincrement())
  date     DateTime @db.Date
  hours    Decimal
  taskName String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
}

model TimeOffBalance {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  type      LeaveType
  balance   Decimal   @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, type])
}

model TimeOffTransaction {
  id            Int              @id @default(autoincrement())
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  recordedBy    User?            @relation("transactionRecorder", fields: [recordedById], references: [id], onDelete: SetNull)
  recordedById  Int?
  type          LeaveType
  requestedType LeaveRequestType @default(VACATION)
  kind          TimeOffEntryKind
  days          Decimal          @db.Decimal(5, 2)
  effectiveDate DateTime         @db.Date
  periodStart   DateTime?        @db.Date
  periodEnd     DateTime?        @db.Date
  note          String?
  createdAt     DateTime         @default(now())

  @@index([userId, type, effectiveDate])
}

model ApprovalRequest {
  id             Int                 @id @default(autoincrement())
  requestType    ApprovalRequestType
  status         ApprovalStatus      @default(PENDING)
  requestedBy    User                @relation("requester", fields: [requestedById], references: [id], onDelete: Cascade)
  requestedById  Int
  reviewedBy     User?               @relation("approver", fields: [reviewedById], references: [id], onDelete: SetNull)
  reviewedById   Int?
  submittedAt    DateTime            @default(now())
  decidedAt      DateTime?
  requesterNote  String?
  approverNote   String?
  metadata       Json?

  timeOffDetails TimeOffRequestDetails?

  @@index([requestType, status, submittedAt])
  @@index([requestedById, status])
}

model TimeOffRequestDetails {
  id                 Int               @id @default(autoincrement())
  approvalRequest    ApprovalRequest   @relation(fields: [approvalRequestId], references: [id], onDelete: Cascade)
  approvalRequestId  Int               @unique
  requestedType      LeaveRequestType
  storedType         LeaveType
  periodStart        DateTime
  periodEnd          DateTime
  partialStartDays   Decimal? @db.Decimal(4, 2)
  partialEndDays     Decimal? @db.Decimal(4, 2)
  totalDays          Decimal  @db.Decimal(5, 2)
  overrideBalance    Boolean  @default(false)
}

enum Role {
  USER
  ADMIN
}

enum LeaveType {
  SICK
  VACATION
}

enum TimeOffEntryKind {
  ACCRUAL
  USAGE
  ADJUSTMENT
}

enum LeaveRequestType {
  SICK
  VACATION
  BEREAVEMENT
  UNPAID
  MILITARY
  JURY_DUTY
  PARENTAL
  OTHER
}

enum ApprovalRequestType {
  TIME_OFF
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}
